{
	"info": {
		"_postman_id": "4fa65935-ef4c-4868-b228-6506e574308f",
		"name": "BookNest",
		"description": "### üîπ **Caracter√≠sticas Clave**\n\n‚úÖ **Gesti√≥n de √≥rdenes:** Los clientes pueden crear y rastrear sus pedidos.  \n‚úÖ **Administraci√≥n de productos:** Los administradores pueden agregar, actualizar y eliminar productos (Libros).  \n‚úÖ **Notificaciones en tiempo real:** Cada cambio en productos u √≥rdenes se notifica autom√°ticamente a los usuarios.  \n‚úÖ **Historial de transacciones:** Se almacena cada compra y actualizaci√≥n de pedidos para trazabilidad.  \n‚úÖ **Pruebas unitarias:** Se implementan pruebas con `JUnit y Mockito` para asegurar la estabilidad del sistema.\n\n### üîπ **Tecnolog√≠as Utilizadas**\n\nüìå **Backend:** `Spring Boot`, `Spring Security` (autenticaci√≥n y roles), `Spring Data JPA` (gesti√≥n de datos).  \nüìå **Base de datos:** `PostgreSQL`  \nüìå **Pruebas unitarias:** `JUnit` y `Mockito` (simulaci√≥n de dependencias).",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "40951832"
	},
	"item": [
		{
			"name": "Authentication Managment",
			"item": [
				{
					"name": "Registrarse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\":\"Jhon Doe\",\r\n    \"correo\":\"jhon.doeadmin@booknest.com\",\r\n    \"contrasena\":\"Pruebas\",\r\n    \"rol\":\"ADMIN\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/usuarios/registrar",
						"description": "## Endpoint: Registrar un Nuevo Usuario\n\nEste endpoint permite registrar un nuevo usuario en el sistema. Los usuarios registrados pueden iniciar sesi√≥n y acceder a las funcionalidades correspondientes a su rol.\n\n---\n\n### **URL**\n\n`POST /usuarios/registrar`\n\n---\n\n### **Descripci√≥n**\n\nRegistra un nuevo usuario en la base de datos de la aplicaci√≥n. Se requiere un cuerpo de solicitud JSON con los detalles del usuario, incluyendo el nombre, correo electr√≥nico, contrase√±a y el rol deseado.\n\n---\n\n### **Par√°metros de Solicitud (Request Body)**\n\nSe espera un objeto JSON en el cuerpo de la solicitud (`application/json`) con los siguientes campos:\n\n| Campo | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `nombre` | `String` | S√≠ | El nombre completo del usuario. | `\"Jhon Diaz\"` |\n| `correo` | `String` | S√≠ | La direcci√≥n de correo electr√≥nico √∫nica del usuario. Debe ser un formato de correo v√°lido. | `\"jhon.diaz_cliente@linktic.com\"` |\n| `contrasena` | `String` | S√≠ | La contrase√±a del usuario. Se recomienda una longitud m√≠nima y complejidad. | `\"Pruebas\"` |\n| `rol` | `String` | S√≠ | El rol asignado al nuevo usuario. Los roles v√°lidos deben ser `ADMIN` o `CLIENTE`. | \"CLIENTE\" |\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `201 Created` | **√âxito:** El usuario ha sido registrado exitosamente. | `{`\"id\": 5,  <br>\"nombre\": \"Jhon Doe\",  <br>\"correo\": \"[jhon.doe_admin@booknest.com](https://mailto:jhon.doe_admin@booknest.com)\",  <br>\"contrasena\": \"$2a$10$8uj/Dd9DItFa.GEL2UxGv.GDevMVz3HHZWtd75lekpwmY.b3U/vhC\",  <br>\"rol\": \"CLIENTE\",  <br>\"fechaRegistro\": \"2025-06-12T11:23:56.2158109\"`}` |"
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login?correo=jhon.doe_cliente@booknest.com&contrasena=Pruebas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							],
							"query": [
								{
									"key": "correo",
									"value": "jhon.doe_cliente@booknest.com"
								},
								{
									"key": "contrasena",
									"value": "Pruebas"
								}
							]
						},
						"description": "## Endpoint: Inicio de Sesi√≥n (Login)\n\nEste endpoint permite a los usuarios autenticarse en el sistema para obtener un token de acceso. Una vez autenticado, el token debe ser incluido en las cabeceras de futuras solicitudes a recursos protegidos.\n\n---\n\n### **URL**\n\n`POST /auth/login`\n\n---\n\n### **Descripci√≥n**\n\nAutentica a un usuario utilizando su correo electr√≥nico y contrase√±a. Si las credenciales son v√°lidas, el sistema devuelve un JSON Web Token (JWT) que el cliente debe usar para acceder a endpoints protegidos.\n\n---\n\n### **Par√°metros de Solicitud**\n\nLos siguientes par√°metros deben ser enviados como parte de la cadena de consulta (query string) en la URL:\n\n| Par√°metro | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `correo` | `String` | S√≠ | La direcci√≥n de correo electr√≥nico del usuario. | `jhon.doe_cliente@booknest.com` |\n| `contrasena` | `String` | S√≠ | La contrase√±a del usuario. | `Pruebas` |\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `200 OK` | **√âxito:** El usuario ha sido autenticado exitosamente y se ha emitido un token. | `{ \"token_generado\"}` |"
					},
					"response": []
				}
			],
			"description": "los **endpoints y la l√≥gica central para la autenticaci√≥n y gesti√≥n de sesiones de usuario** dentro de la aplicaci√≥n. Su prop√≥sito principal es asegurar que solo los usuarios verificados puedan acceder a los recursos protegidos y gestionar sus credenciales de forma segura."
		},
		{
			"name": "Libro Managment",
			"item": [
				{
					"name": "Obtener libros (publico)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/libros/todos",
						"description": "### 1\\. Obtener Todos los Libros\n\nEste endpoint recupera una lista de todos los libros disponibles en la base de datos.\n\n### **URL**\n\n`GET /libros/todos`\n\n---\n\n### **Descripci√≥n**\n\nRetorna una lista de todos los objetos `Libro` almacenados en la base de datos. Este endpoint es de acceso p√∫blico y no requiere autenticaci√≥n.\n\n---\n\n### **Par√°metros de Solicitud**\n\nNinguno.\n\n---\n\n### **Ejemplo de Solicitud**\n\nHTTP\n\n```\nGET /libros/todos HTTP/1.1\nHost: http://localhost:8080\n\n ```\n\n---\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `200 OK` | **√âxito:** Retorna una lista de libros. Si no hay libros, retorna una lista vac√≠a. | `json [ { \"id\": 1, \"titulo\": \"Cien a√±os de soledad\", \"autor\": \"Gabriel Garc√≠a M√°rquez\", \"precio\": 19.99, \"stock\": 100 }, { \"id\": 2, \"titulo\": \"El Principito\", \"autor\": \"Antoine de Saint-Exup√©ry\", \"precio\": 12.50, \"stock\": 50 } ]` |"
					},
					"response": []
				},
				{
					"name": "Eliminar libro por Id (Rol admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqaG9uLmRpYXpAbGlua3RpYy5jb20iLCJyb2wiOiJBRE1JTiIsImlhdCI6MTc0OTc0Njk4NSwiZXhwIjoxNzQ5ODMzMzg1fQ.iThKYBglbYSwyWVYaytDUvK1sTjfH_frNO_E0vl3gaA",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/libros/eliminar/{{id}}",
						"description": "## Endpoint: Eliminar Libro por ID\n\nEste endpoint permite a los usuarios con rol de `ADMIN` eliminar un libro existente del cat√°logo del sistema.\n\n---\n\n### **URL**\n\n`DELETE /libros/eliminar/{id}`\n\n---\n\n### **Descripci√≥n**\n\nElimina un registro de libro de la base de datos utilizando su identificador √∫nico. Una vez eliminado, el libro ya no estar√° disponible en el cat√°logo. **Este endpoint requiere que el usuario est√© autenticado y tenga el rol** **`ADMIN`** **para poder realizar la operaci√≥n.**\n\n---\n\n### **Par√°metros de Ruta**\n\nLos siguientes par√°metros deben ser incluidos en la ruta de la URL:\n\n| Par√°metro | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `id` | `Long` | S√≠ | El **identificador √∫nico** del libro a eliminar. | `1` |\n\n### **Cabeceras de Solicitud (Request Headers)**\n\nEste endpoint requiere autenticaci√≥n mediante un token JWT v√°lido.\n\n| Cabecera | Valor de Ejemplo |\n| --- | --- |\n| `Authorization` | `Bearer token_generado` |\n\n### **Ejemplo de Solicitud**\n\nHTTP\n\n```\nDELETE /libros/eliminar/1 HTTP/1.1\nHost: http://localhost:8080\nAuthorization: Bearer token_generado\n\n ```\n\n---\n\n### Respuesta de la solicitud (Response)\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `204 No Content` | **√âxito:** El libro ha sido eliminado exitosamente. Este c√≥digo indica que la operaci√≥n fue exitosa pero no hay contenido que devolver. | `(Cuerpo vac√≠o)` |"
					},
					"response": []
				},
				{
					"name": "Crear nuevo libro (Rol admin)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqaG9uLmRpYXpAbGlua3RpYy5jb20iLCJyb2wiOiJBRE1JTiIsImlhdCI6MTc0Nzc1ODM5NCwiZXhwIjoxNzQ3ODQ0Nzk0fQ.f9giQ2lV4w744XCC_jNV_qUVliF5zLRFOznov3y2Ajk",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"titulo\":\"Noches blancas y otros cuentos\",\r\n    \"autor\":\"Fiodor Dostoievski\",\r\n    \"precio\": 50.000,\r\n    \"stock\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/libros/crear",
						"description": "## Endpoint: Crear Nuevo Libro\n\nEste endpoint permite a los usuarios con rol de `ADMIN` a√±adir un nuevo libro al cat√°logo del sistema.\n\n---\n\n### **URL**\n\n`POST /libros/crear`\n\n---\n\n### **Descripci√≥n**\n\nCrea un nuevo registro de libro en la base de datos con los detalles proporcionados. **Este endpoint requiere que el usuario est√© autenticado y tenga el rol** **`ADMIN`** **para poder realizar la operaci√≥n.**\n\n---\n\n### **Par√°metros de Solicitud (Request Body)**\n\nSe espera un objeto JSON en el cuerpo de la solicitud (`application/json`) con los siguientes campos:\n\n| Campo | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `titulo` | `String` | S√≠ | El t√≠tulo del libro. | `\"Noches blancas y otros cuentos\"` |\n| `autor` | `String` | S√≠ | El nombre del autor del libro. | `\"Fiodor Dostoievski\"` |\n| `precio` | `Double` | S√≠ | El precio de venta del libro. | `50.000` |\n| `stock` | `Integer` | S√≠ | La cantidad inicial de unidades disponibles en stock. | `5` |\n\n### **Cabeceras de Solicitud (Request Headers)**\n\nEste endpoint requiere autenticaci√≥n mediante un token JWT v√°lido.\n\n| Cabecera | Valor de Ejemplo | Descripci√≥n |\n| --- | --- | --- |\n| `Authorization` | `Bearer token_generado` | Un token JWT v√°lido obtenido del endpoint `/auth/login`. Debe comenzar con `Bearer` (incluyendo el espacio). |\n| `Content-Type` | `application/json` | Indica que el cuerpo de la solicitud es JSON. |\n\n### **Ejemplo de Solicitud**\n\nHTTP\n\n```\nPOST /libros/crear HTTP/1.1\nHost: http://localhost:8080\nContent-Type: application/json\nAuthorization: Bearer token_generado\n{\n    \"titulo\": \"Noches blancas y otros cuentos\",\n    \"autor\": \"Fiodor Dostoievski\",\n    \"precio\": 50.000,\n    \"stock\": 5\n}\n\n ```\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `201 Created` | **√âxito:** El libro ha sido creado y a√±adido al cat√°logo. | `json { \"id\": 3, \"titulo\": \"Noches blancas y otros cuentos\", \"autor\": \"Fiodor Dostoievski\", \"precio\": 50.000, \"stock\": 5 }` |"
					},
					"response": []
				},
				{
					"name": "Obtener libro por Id (publico)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{base_url}}/libros/{{id}}",
						"description": "## Endpoint: Obtener Libro por ID (P√∫blico)\n\nEste endpoint permite a cualquier usuario, incluso sin autenticaci√≥n, recuperar los detalles de un libro espec√≠fico utilizando su identificador √∫nico.\n\n---\n\n### **URL**\n\n`GET /libros/{id}`\n\n---\n\n### **Descripci√≥n**\n\nRetorna los detalles completos de un libro espec√≠fico bas√°ndose en su ID. Este endpoint es de acceso p√∫blico y no requiere autenticaci√≥n. Es √∫til para visualizar la informaci√≥n de un libro en particular dentro del cat√°logo.\n\n---\n\n### **Par√°metros de Ruta (Path Parameters)**\n\nLos siguientes par√°metros deben ser incluidos en la ruta de la URL:\n\n| Par√°metro | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `id` | `Long` | S√≠ | El **identificador √∫nico** del libro a recuperar. | `1` |\n\n### **Ejemplo de Solicitud**\n\nHTTP\n\n```\nGET /libros/1 HTTP/1.1\nHost: http://localhost:8080\n\n ```\n\n---\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `200 OK` | **√âxito:** Retorna el objeto `Libro` con el ID especificado. | `json { \"id\": 1, \"titulo\": \"Cien a√±os de soledad\", \"autor\": \"Gabriel Garc√≠a M√°rquez\", \"precio\": 19.99, \"stock\": 100 }` |"
					},
					"response": []
				},
				{
					"name": "Actualizar libro por Id (Rol admin)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqaG9uLmRpYXpAbGlua3RpYy5jb20iLCJyb2wiOiJBRE1JTiIsImlhdCI6MTc0OTc0Njk4NSwiZXhwIjoxNzQ5ODMzMzg1fQ.iThKYBglbYSwyWVYaytDUvK1sTjfH_frNO_E0vl3gaA",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"titulo\":\"Noches blancas y otros cuentos\",\r\n    \"autor\":\"Fiodor Dostoievski\",\r\n    \"precio\": 100000,\r\n    \"stock\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/libros/actualizar/{{id}}",
						"description": "## Endpoint: Actualizar Libro por ID\n\nEste endpoint permite a los usuarios con rol de `ADMIN` actualizar la informaci√≥n de un libro existente en el cat√°logo del sistema.\n\n---\n\n### **URL**\n\n`PUT /libros/actualizar/{id}`\n\n---\n\n### **Descripci√≥n**\n\nActualiza los detalles de un libro espec√≠fico en la base de datos utilizando su identificador √∫nico. Los campos proporcionados en el cuerpo de la solicitud actualizar√°n los valores existentes del libro. **Este endpoint requiere que el usuario est√© autenticado y tenga el rol** **`ADMIN`** **para poder realizar la operaci√≥n.**\n\n### **Par√°metros de Ruta (Path Parameters)**\n\nLos siguientes par√°metros deben ser incluidos en la ruta de la URL:\n\n| Par√°metro | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `id` | `Long` | S√≠ | El **identificador √∫nico** del libro a actualizar. | `1` |\n\n### **Par√°metros de Solicitud (Request Body)**\n\nSe espera un objeto JSON en el cuerpo de la solicitud (`application/json`) con los campos del libro que se desean actualizar. No es necesario enviar todos los campos si solo se quieren modificar algunos.\n\n| Campo | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `titulo` | `String` | No | El nuevo t√≠tulo del libro. | `\"Noches blancas\"` |\n| `autor` | `String` | No | El nuevo nombre del autor del libro. | `\"Fiodor D.\"` |\n| `precio` | `Double` | No | El nuevo precio de venta del libro. | `55.000` |\n| `stock` | `Integer` | No | La nueva cantidad de unidades disponibles en stock. | `10` |\n\n### **Cabeceras de Solicitud (Request Headers)**\n\nEste endpoint requiere autenticaci√≥n mediante un token JWT v√°lido.\n\n| Cabecera | Valor de Ejemplo | Descripci√≥n |\n| --- | --- | --- |\n| `Authorization` | `Bearer token_generado` | Un token JWT v√°lido obtenido del endpoint `/auth/login`. Debe comenzar con `Bearer` (incluyendo el espacio). |\n| `Content-Type` | `application/json` |  |\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `200 OK` | **√âxito:** El libro ha sido actualizado y se devuelve el objeto `Libro` con los nuevos datos. | `json { \"id\": 1, \"titulo\": \"Noches blancas y otros cuentos\", \"autor\": \"Fiodor Dostoievski\", \"precio\": 55.000, \"stock\": 5 }` |"
					},
					"response": []
				}
			],
			"description": "Los endpoints de libros te brindan acceso completo al cat√°logo de la librer√≠a, permiti√©ndote explorar y gestionar la colecci√≥n disponible. Aqu√≠, cualquier usuario puede **consultar la lista completa de libros** o **buscar los detalles de un libro espec√≠fico** por su identificador.\n\nAdem√°s, para mantener el cat√°logo siempre actualizado, los administradores tienen la capacidad de **a√±adir nuevos t√≠tulos**, **modificar la informaci√≥n de libros existentes** y **eliminar aquellos que ya no est√©n disponibles**, asegurando as√≠ una gesti√≥n eficiente de los recursos literarios."
		},
		{
			"name": "Orden Managment",
			"item": [
				{
					"name": "Crear orden",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqaG9uLmRvZV9jbGllbnRlQGJvb2tuZXN0LmNvbSIsInJvbCI6IkNMSUVOVEUiLCJpYXQiOjE3NDk3NTAwNDAsImV4cCI6MTc0OTgzNjQ0MH0.Nk3heezs7QrZWYyymr_UnL_nTvMvqElZKvoFQ31CsEs",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n    \"estado\": \"PENDIENTE\",\r\n    \"librosOrdenados\": [\r\n        {\r\n            \"libro\": { \"id\": 2 },\r\n            \"cantidad\": 3,\r\n            \"precioUnitario\": 45.99\r\n        },\r\n        {\r\n            \"libro\": { \"id\": 3 },\r\n            \"cantidad\": 1,\r\n            \"precioUnitario\": 30.50\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/ordenes/crear",
						"description": "## Endpoint: Crear Nueva Orden\n\nEste endpoint permite a los **usuarios autenticados con el rol** **`CLIENTE`** crear una nueva orden, especificando los libros que desean adquirir y sus cantidades.\n\n---\n\n### **URL**\n\n`POST /ordenes/crear`\n\n---\n\n### **Descripci√≥n**\n\nCrea un nuevo registro de orden en el sistema. La orden incluye una lista de libros con sus respectivas cantidades y precios unitarios al momento de la orden. **Este endpoint requiere que el usuario est√© autenticado y posea el rol** **`CLIENTE`** **para poder realizar la operaci√≥n.**\n\n---\n\n### **Par√°metros de Solicitud (Request Body)**\n\nSe espera un objeto JSON en el cuerpo de la solicitud (`application/json`) con los siguientes campos:\n\n| Campo | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `estado` | `String` | S√≠ | El estado inicial de la orden. T√≠picamente `\"PENDIENTE\"` para nuevas √≥rdenes. | `\"PENDIENTE\"` |\n| `librosOrdenados` | `Array` | S√≠ | Una lista de objetos, cada uno representando un libro incluido en la orden. | Ver ejemplo m√°s abajo |\n| `libro` (Objeto) | `Object` | S√≠ | Objeto que contiene solo el ID del libro. | `{ \"id\": 2 }` |\n| `id` | `Long` | S√≠ | El **ID del libro** que se est√° ordenando. | `2` |\n| `cantidad` | `Integer` | S√≠ | La cantidad de este libro espec√≠fico a ordenar. Debe ser un valor positivo. | `3` |\n| `precioUnitario` | `Double` | S√≠ | El precio unitario del libro en el momento de la orden. Esto previene cambios de precio posteriores. | `45.99` |\n\n### **Cabeceras de Solicitud (Request Headers)**\n\nEste endpoint requiere autenticaci√≥n mediante un token JWT v√°lido, asociado a un usuario con el rol `CLIENTE`.\n\n| Cabecera | Valor de Ejemplo | Descripci√≥n |\n| --- | --- | --- |\n| `Authorization` | `Bearer token_generado` | Un token JWT v√°lido obtenido del endpoint `/auth/login`. Debe comenzar con `Bearer` (incluyendo el espacio). |\n| `Content-Type` | `application/json` |  |\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `201 Created` | **√âxito:** La orden ha sido creada exitosamente. Se devuelve la orden completa, incluyendo su ID generado y detalles de los libros ordenados. | `json { \"id\": 19, \"usuarioId\": 3, \"fecha\": \"2025-06-12T12:40:56.93281\", \"estado\": \"PENDIENTE\", \"librosOrdenados\": [ { \"libroId\": 2, \"titulo\": \"Noches blancas y otros cuentos\", \"cantidad\": 3, \"precioUnitario\": 45.99 }, { \"libroId\": 3, \"titulo\": \"Heroe de las eras\", \"cantidad\": 1, \"precioUnitario\": 30.5 } ] }` |"
					},
					"response": []
				},
				{
					"name": "Obtener orden por Id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqaG9uLmRvZV9jbGllbnRlQGJvb2tuZXN0LmNvbSIsInJvbCI6IkNMSUVOVEUiLCJpYXQiOjE3NDk3NTAwNDAsImV4cCI6MTc0OTgzNjQ0MH0.Nk3heezs7QrZWYyymr_UnL_nTvMvqElZKvoFQ31CsEs",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{base_url}}/ordenes/{{id}}",
						"description": "## Endpoint: Obtener Orden por ID\n\nEste endpoint permite a un **usuario autenticado (el** **`CLIENTE`****)** recuperar los detalles de una orden espec√≠fica utilizando su identificador √∫nico.\n\n---\n\n### **URL**\n\n`GET /ordenes/{id}`\n\n---\n\n### **Descripci√≥n**\n\nRetorna los detalles completos de una orden espec√≠fica bas√°ndose en su ID. **Este endpoint requiere que el usuario est√© autenticado con un usuario que tenga el rol CLIENTE.**\n\n---\n\n### **Par√°metros de Ruta (Path Parameters)**\n\nLos siguientes par√°metros deben ser incluidos en la ruta de la URL:\n\n| Par√°metro | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `id` | `Long` | S√≠ | El **identificador √∫nico** de la orden a recuperar. | `19` |\n\n### **Cabeceras de Solicitud (Request Headers)**\n\nEste endpoint requiere autenticaci√≥n mediante un token JWT v√°lido.\n\n| Cabecera | Valor de Ejemplo | Descripci√≥n |\n| --- | --- | --- |\n| `Authorization` | `Bearer token_generado` | Un token JWT v√°lido obtenido del endpoint /auth/login. Debe comenzar con Bearer (incluyendo el espacio). |\n\n### **Ejemplo de Solicitud**\n\n```\nGET /ordenes/19 HTTP/1.1\nHost: http://localhost:8080\nAuthorization: Bearer token_generado\n\n ```\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `200 OK` | **√âxito:** Retorna el objeto `Orden` con el ID especificado. | `json { \"id\": 19, \"usuarioId\": 3, \"fecha\": \"2025-06-12T12:40:56.93281\", \"estado\": \"PENDIENTE\", \"librosOrdenados\": [ { \"libroId\": 2, \"titulo\": \"Noches blancas y otros cuentos\", \"cantidad\": 3, \"precioUnitario\": 45.99 }, { \"libroId\": 3, \"titulo\": \"Heroe de las eras\", \"cantidad\": 1, \"precioUnitario\": 30.5 } ] }` |"
					},
					"response": []
				},
				{
					"name": "Obtener ordenes por usuario",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqaG9uLmRvZV9jbGllbnRlQGJvb2tuZXN0LmNvbSIsInJvbCI6IkNMSUVOVEUiLCJpYXQiOjE3NDk3NTAwNDAsImV4cCI6MTc0OTgzNjQ0MH0.Nk3heezs7QrZWYyymr_UnL_nTvMvqElZKvoFQ31CsEs",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{base_url}}/ordenes/usuario/{{id}}",
						"description": "## Endpoint: Obtener √ìrdenes de un Usuario Espec√≠fico\n\nEste endpoint permite a un **usuario autenticado (con el rol** **`CLIENTE`**)** recuperar una lista de todas las √≥rdenes asociadas a un `usuarioId` dado.\n\n---\n\n### **URL**\n\n`GET /ordenes/usuario/{id}`\n\n---\n\n### **Descripci√≥n**\n\nRetorna una lista de todas las √≥rdenes creadas por un usuario cuyo ID coincide con el `{id}` proporcionado en la ruta. **Este endpoint requiere que el usuario est√© autenticado.** Solo el usuario con el `id` especificado (con rol `CLIENTE`) pueden acceder a esta informaci√≥n.\n\n---\n\n### **Par√°metros de Ruta (Path Parameters)**\n\nLos siguientes par√°metros deben ser incluidos en la ruta de la URL:\n\n| Par√°metro | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `id` | `Long` | S√≠ | El **identificador √∫nico del usuario** cuyas √≥rdenes se desean recuperar. | `3` |\n\n### **Cabeceras de Solicitud (Request Headers)**\n\nEste endpoint requiere autenticaci√≥n mediante un token JWT v√°lido.\n\n| Cabecera | Valor de Ejemplo | Descripci√≥n |\n| --- | --- | --- |\n| `Authorization` | `Bearer token_generado` | Un token JWT v√°lido obtenido del endpoint `/auth/login`. Debe comenzar con `Bearer` (incluyendo el espacio). |\n\n### **Ejemplo de Solicitud**\n\nHTTP\n\n```\nGET /ordenes/usuario/3 HTTP/1.1\nHost: tu-dominio.com\nAuthorization: Bearer token_generado\n\n ```\n\n---\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `200 OK` | **√âxito:** Retorna una lista de √≥rdenes asociadas al `usuarioId` especificado. Si el usuario no tiene √≥rdenes, la lista estar√° vac√≠a. | `json [ { \"id\": 19, \"usuarioId\": 3, \"fecha\": \"2025-06-12T12:40:56.93281\", \"estado\": \"PENDIENTE\", \"librosOrdenados\": [ { \"libroId\": 2, \"titulo\": \"Noches blancas y otros cuentos\", \"cantidad\": 3, \"precioUnitario\": 45.99 } ] }, { \"id\": 20, \"usuarioId\": 3, \"fecha\": \"2025-06-10T09:15:00.000Z\", \"estado\": \"COMPLETADA\", \"librosOrdenados\": [ { \"libroId\": 1, \"titulo\": \"Cien a√±os de soledad\", \"cantidad\": 1, \"precioUnitario\": 19.99 } ] } ]` |\n| `401 Unauthorized` | **No Autorizado:**  <br>\\- No se proporcion√≥ un token de autenticaci√≥n.  <br>\\- El token proporcionado es inv√°lido o ha expirado. | `(Cuerpo vac√≠o)` |\n| `403 Forbidden` | **Prohibido:**  <br>\\- El token es v√°lido, pero el usuario no tiene los permisos para ver las √≥rdenes del `usuarioId` especificado (ej. un `CLIENTE` intentando ver √≥rdenes de otro `CLIENTE`). | `(Cuerpo vac√≠o)` |\n| `404 Not Found` | **No Encontrado:** No se encontr√≥ ning√∫n usuario con el `id` proporcionado. | `(Cuerpo vac√≠o)` |"
					},
					"response": []
				},
				{
					"name": "Actualizar orden",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqaG9uLmRvZWFkbWluQGJvb2tuZXN0LmNvbSIsInJvbCI6IkFETUlOIiwiaWF0IjoxNzQ5NzU1MDkyLCJleHAiOjE3NDk4NDE0OTJ9.0cvKc2KiDeY6imL_4lOfubh-HZwyZZEpzsAMseRKUBs",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"EN_PROCESO\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/ordenes/actualizar-estado/{{id}}",
						"description": "StartFragment\n\n## Endpoint: Actualizar Estado de Orden por ID\n\nEste endpoint permite a los **usuarios con el rol** **`ADMIN`** actualizar el estado de una orden espec√≠fica en el sistema.\n\n---\n\n### **URL**\n\n`PUT /ordenes/actualizar-estado/{id}`\n\n---\n\n### **Descripci√≥n**\n\nActualiza el estado de una orden existente, identificado por su `{id}`. El nuevo estado se env√≠a en el cuerpo de la solicitud como una cadena de texto. **Este endpoint requiere que el usuario est√© autenticado y posea el rol** **`ADMIN`** **para poder realizar la operaci√≥n.**\n\n---\n\n### **Par√°metros de Ruta (Path Parameters)**\n\nLos siguientes par√°metros deben ser incluidos en la ruta de la URL:\n\n| Par√°metro | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `id` | `Long` | S√≠ | El **identificador √∫nico** de la orden cuyo estado se desea actualizar. | `19` |\n\n### **Par√°metros de Solicitud (Request Body)**\n\nSe espera un objeto JSON en el cuerpo de la solicitud (`application/json`) con el siguiente campo:\n\n| Campo | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `estado` | `String` | S√≠ | El nuevo estado de la orden. Los valores v√°lidos deber√≠an incluir estados como `\"EN_PROCESO\"`, `\"ENVIADA\"`, `\"COMPLETADA\"`, `\"CANCELADA\"`. | `\"EN_PROCESO\"` |\n\n### **Cabeceras de Solicitud (Request Headers)**\n\nEste endpoint requiere autenticaci√≥n mediante un token JWT v√°lido, asociado a un usuario con el rol `ADMIN`.\n\n| Cabecera | Valor de Ejemplo | Descripci√≥n |\n| --- | --- | --- |\n| `Authorization` | `Bearer token_generado` | Un token JWT v√°lido obtenido del endpoint `/auth/login`. Debe comenzar con `Bearer` (incluyendo el espacio). |\n| `Content-Type` | `application/json` |  |\n\n### **Ejemplo de Solicitud**\n\nHTTP\n\n```\nPUT /ordenes/actualizar-estado/19 HTTP/1.1\nHost: tu-dominio.com\nContent-Type: application/json\nAuthorization: Bearer token_generado\n\"EN_PROCESO\"\n\n ```\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `200 OK` | **√âxito:** El estado de la orden ha sido actualizado. Se devuelve la orden completa con el nuevo estado. | `json { \"id\": 19, \"usuarioId\": 3, \"fecha\": \"2025-06-12T12:40:56.93281\", \"estado\": \"EN_PROCESO\", \"librosOrdenados\": [ { \"libroId\": 2, \"titulo\": \"Noches blancas y otros cuentos\", \"cantidad\": 3, \"precioUnitario\": 45.99 }, { \"libroId\": 3, \"titulo\": \"Heroe de las eras\", \"cantidad\": 1, \"precioUnitario\": 30.5 } ] }` |\n| `400 Bad Request` | **Error de Solicitud:**  <br>\\- El estado proporcionado no es v√°lido o no est√° permitido para la transici√≥n actual de la orden. | `(Cuerpo vac√≠o )` |\n| `401 Unauthorized` | **No Autorizado:**  <br>\\- No se proporcion√≥ un token de autenticaci√≥n.  <br>\\- El token proporcionado es inv√°lido o ha expirado. | `(Cuerpo vac√≠o )` |\n| `403 Forbidden` | **Prohibido:**  <br>\\- El token es v√°lido, pero el usuario **no tiene el rol** **`ADMIN`** para realizar esta acci√≥n. | `(Cuerpo vac√≠o )` |\n| `404 Not Found` | **No Encontrado:** No se encontr√≥ ninguna orden con el `id` proporcionado para actualizar. | `(Cuerpo vac√≠o )` |"
					},
					"response": []
				},
				{
					"name": "Completar orden",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqaG9uLmRvZV9jbGllbnRlQGJvb2tuZXN0LmNvbSIsInJvbCI6IkNMSUVOVEUiLCJpYXQiOjE3NDk3NTcyMjksImV4cCI6MTc0OTg0MzYyOX0.BuyNQDbw1q2cVBIKPkU7vHJKcFU2cAiDjjdmQmV1R_Q",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"Tarjeta de cr√©dito\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/ordenes/completar/{{id}}",
						"description": "## Endpoint: Completar Orden por ID\n\nEste endpoint permite a los **usuarios con el rol** **`ADMIN`** marcar una orden espec√≠fica como \"COMPLETADA\", **registrando o confirmando el m√©todo de pago** en este paso.\n\n---\n\n### **URL**\n\n`PUT /ordenes/completar/{id}`\n\n---\n\n### **Descripci√≥n**\n\nActualiza el estado de una orden espec√≠fica a \"COMPLETADA\". Esta operaci√≥n es el paso final en el procesamiento de una orden y **requiere la especificaci√≥n del m√©todo de pago utilizado para la orden**. **Este endpoint requiere que el usuario est√© autenticado y posea el rol** **`ADMIN`** **para poder realizar la operaci√≥n.**\n\n### **Par√°metros de Ruta (Path Parameters)**\n\nLos siguientes par√°metros deben ser incluidos en la ruta de la URL:\n\n| Par√°metro | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `id` | `Long` | S√≠ | El **identificador √∫nico** de la orden a completar. | `19` |\n\n### **Par√°metros de Solicitud (Request Body)**\n\nSe espera un objeto JSON en el cuerpo de la solicitud (`application/json`) con el siguiente campo:\n\n| Campo | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `metodoPago` | `String` | S√≠ | El m√©todo de pago final o confirmado para esta orden. Los valores v√°lidos pueden incluir `\"Tarjeta de cr√©dito\"`, `\"Efectivo\"`, `\"Transferencia\"`, etc. | `\"Tarjeta de cr√©dito\"` |\n\n### **Cabeceras de Solicitud (Request Headers)**\n\nEste endpoint requiere autenticaci√≥n mediante un token JWT v√°lido, asociado a un usuario con el rol `ADMIN`.\n\n| Cabecera | Valor de Ejemplo | Descripci√≥n |\n| --- | --- | --- |\n| `Authorization` | `Bearer token_generado` | Un token JWT v√°lido obtenido del endpoint `/auth/login`. Debe comenzar con `Bearer` (incluyendo el espacio). |\n| `Content-Type` | `application/json` | Indica que el cuerpo de la solicitud es JSON. |\n\n### **Ejemplo de Solicitud**\n\nHTTP\n\n```\nPUT /ordenes/completar/19 HTTP/1.1\nHost: http://localhost:8080\nContent-Type: application/json\nAuthorization: Bearer token_generado\n\"Tarjeta de cr√©dito\"\n\n ```\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `200 OK` | **√âxito:** La orden ha sido marcada como \"COMPLETADA\" y el m√©todo de pago registrado. Se devuelve la orden con su estado y m√©todo de pago actualizados. | `json { \"id\": 19, \"usuarioId\": 3, \"fecha\": \"2025-06-12T12:40:56.93281\", \"estado\": \"COMPLETADA\", \"metodoPago\": \"Tarjeta de cr√©dito\", \"librosOrdenados\": [ { \"libroId\": 2, \"titulo\": \"Noches blancas y otros cuentos\", \"cantidad\": 3, \"precioUnitario\": 45.99 }, { \"libroId\": 3, \"titulo\": \"Heroe de las eras\", \"cantidad\": 1, \"precioUnitario\": 30.5 } ] }` |"
					},
					"response": []
				}
			],
			"description": "Estos endpoints son utilizados en el proceso de compra de la librer√≠a, permiti√©ndote gestionar el ciclo de vida de las transacciones. Aqu√≠ puedes **crear nuevas √≥rdenes** con los libros que deseas, **consultar el estado de tus compras** en cualquier momento, y para los administradores, **actualizar el estado de las √≥rdenes**, e incluso **marcar una orden como completada** una vez que ha sido entregada y pagada."
		},
		{
			"name": "Notificacion Managment",
			"item": [
				{
					"name": "Ver notificaciones",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqaG9uLmRvZWFkbWluQGJvb2tuZXN0LmNvbSIsInJvbCI6IkFETUlOIiwiaWF0IjoxNzQ5NzU4NTIwLCJleHAiOjE3NDk4NDQ5MjB9.vfuVY4AMwmTIp5eszPczdH5ZIdw43U9TbDv5CYIDMM4",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{base_url}}/notificaciones/usuario",
						"description": "## Endpoint: Obtener Notificaciones del Usuario Autenticado\n\nEste endpoint permite a un **usuario autenticado (con rol** **`CLIENTE`** **o** **`ADMIN`****)** recuperar una lista de todas sus notificaciones pendientes o registradas en el sistema.\n\n---\n\n### **URL**\n\n`GET /notificaciones/usuario`\n\n---\n\n### **Descripci√≥n**\n\nRetorna una lista de todas las notificaciones asociadas al usuario que realiza la solicitud (identificado por su token JWT). Este endpoint es √∫til para que los usuarios puedan ver sus alertas sobre √≥rdenes, actualizaciones de libros, etc. **Este endpoint requiere que el usuario est√© autenticado.**\n\n### **Par√°metros de Solicitud**\n\nNinguno. El ID del usuario se obtiene del token de autenticaci√≥n.\n\n---\n\n### **Cabeceras de Solicitud (Request Headers)**\n\nEste endpoint requiere autenticaci√≥n mediante un token JWT v√°lido.\n\n| Cabecera | Valor de Ejemplo | Descripci√≥n |\n| --- | --- | --- |\n| `Authorization` | `Bearer token_generado` | Un token JWT v√°lido obtenido del endpoint `/auth/login`. Debe comenzar con `Bearer` (incluyendo el espacio). |\n\n### **Ejemplo de Solicitud**\n\nHTTP\n\n```\nGET /notificaciones/usuario HTTP/1.1\nHost: http://localhost:8080\nAuthorization: Bearer token_generado\n\n ```\n\n---\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `200 OK` | **√âxito:** Retorna una lista de notificaciones para el usuario. Si no hay notificaciones, retorna una lista vac√≠a. | `json [ { \"id\": 90, \"usuario\": { \"id\": 3, \"nombre\": \"Jhon Doe\", \"correo\": \"jhon.doe_cliente@booknest.com\", \"contrasena\": \"$2a$10$kALggtXHlZ4XeALMloXUM.FrJLcp364a.y7sHWf6emaRtCOTEbo.W\", \"rol\": \"CLIENTE\", \"fechaRegistro\": \"2025-06-12T11:21:08.725195\" }, \"mensaje\": \"El libro 'Noches blancas y otros cuentos' ha cambiado de precio a $100000.0\", \"fecha\": \"2025-06-12T11:50:22.699791\", \"leido\": false }, { \"id\": 94, \"usuario\": { \"id\": 3, \"nombre\": \"Jhon Doe\", \"correo\": \"jhon.doe_cliente@booknest.com\", \"contrasena\": \"$2a$10$kALggtXHlZ4XeALMloXUM.FrJLcp364a.y7sHWf6emaRtCOTEbo.W\", \"rol\": \"CLIENTE\", \"fechaRegistro\": \"2025-06-12T11:21:08.725195\" }, \"mensaje\": \"El stock del libro 'Noches blancas y otros cuentos' ha cambiado a 10 unidades.\", \"fecha\": \"2025-06-12T11:50:22.716655\", \"leido\": false }, { \"id\": 96, \"usuario\": { \"id\": 3, \"nombre\": \"Jhon Doe\", \"correo\": \"jhon.doe_cliente@booknest.com\", \"contrasena\": \"$2a$10$kALggtXHlZ4XeALMloXUM.FrJLcp364a.y7sHWf6emaRtCOTEbo.W\", \"rol\": \"CLIENTE\", \"fechaRegistro\": \"2025-06-12T11:21:08.725195\" }, \"mensaje\": \"Tu orden ha sido creada con estado PENDIENTE.\", \"fecha\": \"2025-06-12T12:40:56.970399\", \"leido\": false } ]` |"
					},
					"response": []
				},
				{
					"name": "Marcar como leido",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqaG9uLmRvZV9jbGllbnRlQGJvb2tuZXN0LmNvbSIsInJvbCI6IkNMSUVOVEUiLCJpYXQiOjE3NDk3NTg4NzQsImV4cCI6MTc0OTg0NTI3NH0.dr_lPB-WgdNjikEHLJ0vfy3Yx5KHbroS5uu3vraqBEw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{base_url}}/notificaciones/marcar-leido/{{id}}",
						"description": "## Endpoint: Marcar Notificaci√≥n como Le√≠da\n\nEste endpoint permite a un **usuario autenticado (el** **`CLIENTE`** **propietario de la notificaci√≥n o un** **`ADMIN`****)** marcar una notificaci√≥n espec√≠fica como \"le√≠da\" utilizando su identificador √∫nico.\n\n---\n\n### **URL**\n\n`PUT /notificaciones/marcar-leido/{id}`\n\n---\n\n### **Descripci√≥n**\n\nActualiza el estado `leido` de una notificaci√≥n espec√≠fica a `true` (verdadera), indicando que el usuario ha visto y procesado el mensaje. **Este endpoint requiere que el usuario est√© autenticado.** Solo el usuario propietario de la notificaci√≥n o un usuario con rol `ADMIN` pueden marcar una notificaci√≥n como le√≠da.\n\n### **Par√°metros de Ruta (Path Parameters)**\n\nLos siguientes par√°metros deben ser incluidos en la ruta de la URL:\n\n| Par√°metro | Tipo de Dato | Obligatorio | Descripci√≥n | Ejemplo |\n| --- | --- | --- | --- | --- |\n| `id` | `Long` | S√≠ | El **identificador √∫nico** de la notificaci√≥n a marcar como le√≠da. | `90` |\n\n### **Par√°metros de Solicitud (Request Body)**\n\nEste endpoint **no espera ning√∫n cuerpo de solicitud JSON**. La acci√≥n de \"marcar como le√≠da\" se infiere de la URL y el m√©todo HTTP.\n\n---\n\n### **Cabeceras de Solicitud (Request Headers)**\n\nEste endpoint requiere autenticaci√≥n mediante un token JWT v√°lido.\n\n| Cabecera | Valor de Ejemplo | Descripci√≥n |\n| --- | --- | --- |\n| `Authorization` | `Bearer token_generado` | Un token JWT v√°lido obtenido del endpoint `/auth/login`. Debe comenzar con `Bearer` (incluyendo el espacio). |\n\n### **Ejemplo de Solicitud**\n\nHTTP\n\n```\nPUT /notificaciones/marcar-leido/90 HTTP/1.1\nHost: http://localhost:8080\nAuthorization: Bearer token_generado\n\n ```\n\n---\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `204 No Content` | **√âxito:** La notificaci√≥n ha sido marcada como le√≠da exitosamente. Este c√≥digo indica que la operaci√≥n fue exitosa pero no hay contenido que devolver. | `(Cuerpo vac√≠o)` |"
					},
					"response": []
				}
			],
			"description": "Los endpoints de notificaciones permiten a los usuarios mantenerse al tanto de eventos importantes y actualizaciones dentro del sistema. Estas notificaciones son alertas que se generan autom√°ticamente, inform√°ndote sobre cambios en el estado de tus √≥rdenes, actualizaciones de precios de libros, o la disponibilidad de nuevos t√≠tulos que podr√≠an interesarte. Puedes consultarlas para estar siempre informado y asegurarte de no perderte ninguna novedad relevante.\n\nSe crea una notificacion automaticamente para el usuario en los siguientes casos\n\n- Se crea una nueva orden\n    \n- Se actualiza el estado de una orden por parte de un administrador\n    \n\nSe crea una notificacion global visible para todos los usuarios en el siguiente caso\n\n- Cada que se actualiza el stock y el precio de un libro"
		},
		{
			"name": "Transaccion Managment",
			"item": [
				{
					"name": "Ver historial de transacciones",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqaG9uLmRvZV9jbGllbnRlQGJvb2tuZXN0LmNvbSIsInJvbCI6IkNMSUVOVEUiLCJpYXQiOjE3NDk3NTg4NzQsImV4cCI6MTc0OTg0NTI3NH0.dr_lPB-WgdNjikEHLJ0vfy3Yx5KHbroS5uu3vraqBEw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{base_url}}/transacciones/usuario",
						"description": "## Endpoint: Obtener Historial de Transacciones del Usuario Autenticado\n\nEste endpoint permite a un **usuario autenticado (con rol** **`CLIENTE`** **o** **`ADMIN`****)** recuperar un historial de todas las transacciones financieras (ej. compras, pagos) asociadas a su cuenta.\n\n---\n\n### **URL**\n\n`GET /transacciones/usuario`\n\n---\n\n### **Descripci√≥n**\n\nRetorna una lista de todas las transacciones realizadas por el usuario que realiza la solicitud (identificado por su token JWT). Este historial puede incluir detalles como el monto, la fecha, el tipo de transacci√≥n, etc. **Este endpoint requiere que el usuario est√© autenticado.**\n\n---\n\n### **Par√°metros de Solicitud (Query Parameters)**\n\nNinguno. El ID del usuario se obtiene del token de autenticaci√≥n.\n\n### **Cabeceras de Solicitud (Request Headers)**\n\nEste endpoint requiere autenticaci√≥n mediante un token JWT v√°lido.\n\n| Cabecera | Valor de Ejemplo | Descripci√≥n |\n| --- | --- | --- |\n| `Authorization` | `Bearer token_generado` | Un token JWT v√°lido obtenido del endpoint `/auth/login`. Debe comenzar con `Bearer` (incluyendo el espacio). |\n\n### **Ejemplo de Solicitud**\n\nHTTP\n\n```\nGET /transacciones/usuario HTTP/1.1\nHost: http://localhost:8080\nAuthorization: Bearer token_generado\n\n ```\n\n---\n\n### **Respuestas (Responses)**\n\n| C√≥digo de Estado HTTP | Descripci√≥n | Cuerpo de la Respuesta (Ejemplo) |\n| --- | --- | --- |\n| `200 OK` | **√âxito:** Retorna una lista del historial de transacciones para el usuario. Si no hay transacciones, retorna una lista vac√≠a. | `json [ { \"id\": 501, \"usuarioId\": 3, \"ordenId\": 19, \"monto\": 168.47, \"tipoTransaccion\": \"COMPRA\", \"metodoPago\": \"Tarjeta de cr√©dito\", \"fechaTransaccion\": \"2025-06-12T12:41:00Z\", \"estado\": \"EXITOSA\" }, { \"id\": 502, \"usuarioId\": 3, \"ordenId\": 20, \"monto\": 19.99, \"tipoTransaccion\": \"COMPRA\", \"metodoPago\": \"PayPal\", \"fechaTransaccion\": \"2025-06-10T09:16:00Z\", \"estado\": \"EXITOSA\" } ]` |"
					},
					"response": []
				}
			],
			"description": "Los endpoints de transacciones proporcionan acceso al historial de movimientos financieros asociados a las √≥rdenes de los usuarios. Es importante destacar que **las transacciones se registran autom√°ticamente en el sistema en el momento en que una orden es marcada como \"COMPLETADA\"**, reflejando as√≠ el pago y la finalizaci√≥n exitosa del proceso de compra. Estos endpoints permiten a los usuarios y administradores consultar esta informaci√≥n para llevar un control detallado de las operaciones."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}